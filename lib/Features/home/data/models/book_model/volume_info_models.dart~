import 'package:equatable/equatable.dart';
import 'package:mvmm/Features/home/data/models/book_model/panelization_summary.dart';
import 'package:mvmm/Features/home/data/models/book_model/reading_modes_model.dart';
import 'image_links.dart';
import 'industry_identifier.dart';

class VolumeInfo extends Equatable {
  final List<IndustryIdentifier>? industryIdentifiers;
  final int? pageCount;
  final String? printType;
  final ReadingModes? readingModes;
  final String? previewLink;
  final String? canonicalVolumeLink;
  final String? description;
  final String? language;
  final String? title;
  final ImageLinks? imageLinks;
  final PanelizationSummary? panelizationSummary;
  final String? publisher;
  final String? publishedDate;
  final List<String>? categories;
  final String? maturityRating;
  final bool? allowAnonLogging;
  final String? contentVersion;
  final List<String>? authors;
  final String? infoLink;

  const VolumeInfo({
    this.industryIdentifiers,
    this.pageCount,
    this.printType,
    this.readingModes,
    this.previewLink,
    this.canonicalVolumeLink,
    this.description,
    this.language,
    this.title,
    this.imageLinks,
    this.panelizationSummary,
    this.publisher,
    this.publishedDate,
    this.categories,
    this.maturityRating,
    this.allowAnonLogging,
    this.contentVersion,
    this.authors,
    this.infoLink,
  });

  factory VolumeInfo.fromJson(Map<dynamic, dynamic> json) => VolumeInfo(
    industryIdentifiers: json["industryIdentifiers"] == null
        ? null
        : List<IndustryIdentifier>.from(
        json["industryIdentifiers"].map((x) => IndustryIdentifier.fromJson(x))),
    pageCount: json["pageCount"] as int?,
    printType: json["printType"] as String?,
    readingModes: json["readingModes"] == null
        ? null
        : ReadingModes.fromJson(json["readingModes"]),
    previewLink: json["previewLink"] as String?,
    canonicalVolumeLink: json["canonicalVolumeLink"] as String?,
    description: json["description"] as String?,
    language: json["language"] as String?,
    title: json["title"] as String?,
    imageLinks: json["imageLinks"] == null
        ? null
        : ImageLinks.fromJson(json["imageLinks"]),
    panelizationSummary: json["panelizationSummary"] == null
        ? null
        : PanelizationSummary.fromJson(json["panelizationSummary"]),
    publisher: json["publisher"] as String?,
    publishedDate: json["publishedDate"] as String?,
    categories: json["categories"] == null
        ? null
        : List<String>.from(json["categories"].map((x) => x as String)),
    maturityRating: json["maturityRating"] as String?,
    allowAnonLogging: json["allowAnonLogging"] as bool?,
    contentVersion: json["contentVersion"] as String?,
    authors: json["authors"] == null
        ? null
        : List<String>.from(json["authors"].map((x) => x as String)),
    infoLink: json["infoLink"] as String?,
  );

  Map<dynamic, dynamic> toJson() => {
    "industryIdentifiers": industryIdentifiers == null
        ? null
        : List<dynamic>.from(industryIdentifiers!.map((x) => x.toJson())),
    "pageCount": pageCount,
    "printType": printType,
    "readingModes": readingModes?.toJson(),
    "previewLink": previewLink,
    "canonicalVolumeLink": canonicalVolumeLink,
    "description": description,
    "language": language,
    "title": title,
    "imageLinks": imageLinks?.toJson(),
    "panelizationSummary": panelizationSummary?.toJson(),
    "publisher": publisher,
    "publishedDate": publishedDate,
    "categories": categories == null
        ? null
        : List<dynamic>.from(categories!.map((x) => x)),
    "maturityRating": maturityRating,
    "allowAnonLogging": allowAnonLogging,
    "contentVersion": contentVersion,
    "authors": authors == null
        ? null
        : List<dynamic>.from(authors!.map((x) => x)),
    "infoLink": infoLink,
  };

  @override
  List<Object?> get props => [
    industryIdentifiers,
    pageCount,
    printType,
    readingModes,
    previewLink,
    canonicalVolumeLink,
    description,
    language,
    title,
    imageLinks,
    panelizationSummary,
    publisher,
    publishedDate,
    categories,
    maturityRating,
    allowAnonLogging,
    contentVersion,
    authors,
    infoLink,
  ];
}
